service: import-service
frameworkVersion: '3'
plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    BUCKET_REGION: us-east-1
    BUCKET_NAME: shop-react-redux-import
    SIGNED_URL_EXPIRATION_TIME_SEC: '60'
    SQS_QUEUE_NAME: catalogItemsQueue
    SQS_QUEUE_URL:
      Ref: SQSQueue
    SNS_TOPIC_NAME: createProductTopic
    SNS_ARN:
      Ref: SNSTopic
    EMAIL: nodm.pe@gmail.com
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/uploaded/*'
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/parsed/*'
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - Fn::GetAtt:
              - SQSQueue
              - Arn
        - Effect: Allow
          Action:
            - sns:*
          Resource:
            Ref: SNSTopic
  stage: dev
  region: us-east-1
  versionFunctions: true
resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: '${self:provider.environment.SQS_QUEUE_NAME}'
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: '${self:provider.environment.SNS_TOPIC_NAME}'
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: '${self:provider.environment.EMAIL}'
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        # Currently, you can't use SNS filters to apply OR logic across different message attributes.
        # Instead, you can use multiple SNS subscriptions with different endpoints to achieve the same effect.
        FilterPolicy: '{ "price": [{ "numeric": [">=", 750] }], "count": [{ "numeric": [">=", 50] }] }'
functions:
  importFileParser:
    handler: src/functions/import-file-parser/handler.main
    events:
      - s3:
          bucket: '${self:provider.environment.BUCKET_NAME}'
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
            - suffix: .csv
          existing: true
    name: import-service-dev-importFileParser
  importProductsFile:
    handler: src/functions/import-products-file/handler.main
    events:
      - http:
          method: get
          path: /import
          cors: true
          request:
            parameters:
              querystrings:
                name: true
    name: import-service-dev-importProductsFile
  catalogBatchProcess:
    handler: src/functions/catalog-batch-process/handler.main
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
          batchSize: 5
    name: import-service-dev-catalogBatchProcess
package:
  individually: true
  artifactsS3KeyDirname: serverless/import-service/dev/code-artifacts
custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
      - pg-native
    target: node14
    define: {}
    platform: node
    concurrency: 10
